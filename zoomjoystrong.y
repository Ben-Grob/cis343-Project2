/* zoomjoystrong.y â€” Parser for drawing language zjs using Bison */

%{
#include <stdio.h>
#include <stdlib.h>
#inclue "zoomjoystrong2.tab.h"

int yylex(void);
void yyerror(const char *s);
%}

%union {
    /* int ival; */
    float fval;
    char var;
}

/* Prototype for the lexer generated by Flex */


/* Token declarations (from Flex) */
/*%token <ival> INT  */
%token <fval> FLOAT INT
%token PLUS MINUS MULT DIV        /* single chars */
%token CIRCLE RECTANGLE LINE POINT      /* commands */
%token  <var> VARIABLE                         /* identifier with semantic value */
%token SET_COLOR
%token END_STATEMENT
%token END EQUALS

%type <fval> expr

%left PLUS MINUS MULT DIV 

/* Data type for semantic values */


%%
program:
    statements END
;

statements:  
    /* lines different from statements? */
    | statements statement END_STATEMENT    
;


statement:
    POINT expr expr 
    | LINE expr expr expr expr 
    | CIRCLE expr expr expr 
    | RECTANGLE expr expr expr expr 
    | SET_COLOR expr expr expr
    | VARIABLE EQUALS
;


expr:
    INT
    | FLOAT             
    | VARIABLE         {$$ = var[$1 - 'A']}
    | expr PLUS expr   { $$ = $1 + $3; }
    | expr MINUS expr { $$ = $1 - $3; }
    | expr MULT expr
    | expr DIV expr
    /* | '(' expr ')' */
    
    
;



%%

int main() {
    printf("Simple Calculator (Flex + Bison)\n");
    printf("Type expressions and press Enter.\n");
    printf("Example: (5 + 3) * 2\n\n");
    yyparse();
    return 0;
}

void yyerror(const char *s) {
    fprintf(stderr, "Error: %s\n", s);
}

///bison -d calc.y      # Generates calc.tab.c and calc.tab.h
//flex calc.l          # Generates lex.yy.c
//gcc calc.tab.c lex.yy.c -o calc -lm
//./calc
//Sample RUn
//Simple Calculator (Flex + Bison)
//Type expressions and press Enter.
// Example: (5 + 3) * 2

// 5 + 3
// = 8.00

// (5 + 3) * 2
// = 16.00

// 7 / 0
// Error: Division by zero!
// = 0.00
